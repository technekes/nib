#!/bin/bash
#
# Checks first argument for help or version option
#
#/* vim: set filetype=sh : */

source "/usr/local/bin/_common"

print_common_usage() {
  echo "Usage: nib ${1} [SERVICE]"
}

print_help_options() {
  echo "Options:
  -h, --help      Print usage
      --version   Print version information
"
}

print_services() {
  echo $(services) | jq -r "\"  - \(.[])\""
}

print_command_instructions() {
  echo $(commands_json) | \
    jq -r '.[] | select(.name == "attach") | .description'
}

show_common_help() {
  echo "$(print_common_usage $COMMAND)

$(print_command_instructions)

Services:
$(print_services)"
}

version() {
  echo $(cat /usr/local/bin/VERSION)
}

check_for_updates() {
  LATEST=$(curl --silent https://raw.githubusercontent.com/technekes/nib/latest/VERSION)
  NIB_VERSION=$(version)

  if [ "$NIB_VERSION" != "$LATEST" ]; then
    echo ""
    echo "An update avaiable is available for nib: $LATEST"
    echo "Use 'nib update' to pull the latest version"
  fi
}

print_commands() {
  template='"\(.name) \"\(.description)\" "'

  echo "Commands:"
  echo "$(echo $(commands_json) | jq -j ".[] | ${template}")" | \
    xargs printf "  %-19s %-s\n"
}

case $1 in
  -h|--help|help)
    if [ -n "$(type -t show_help)" ]; then
      show_help
    else
      show_common_help
    fi

    check_for_updates
    exit 0
    ;;
  --version|version)
    version

    check_for_updates
    exit 0
    ;;
esac
