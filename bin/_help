#!/bin/bash
#
# Checks first argument for help or version option
#
#/* vim: set filetype=sh : */

source "/usr/local/bin/_common"

print_common_usage() {
  echo "Usage: nib $COMMAND [SERVICE]"
}

print_help_options() {
  if [ "$(echo $(command_json) | jq '.options | length')" -ne 0 ]; then
    template=".options[] | \"  \(.flag)    \(.description)\n\""

    echo -e "\nOptions:"
    echo -e "$(echo $(command_json) | jq -r "$template")\n "
  fi
}

print_services() {
  echo $(services) | jq -r "\"  - \(.[])\""
}

print_command_instructions() {
  template="\"\(.short_description)\n\n\(.long_description)\""

  echo $(command_json) | jq -r "$template"
}

show_common_help() {
  echo "$(print_common_usage)

$(print_command_instructions)
$(print_help_options)
Services:
$(print_services)"
}

version() {
  echo $(cat /usr/local/bin/VERSION)
}

check_for_updates() {
  LATEST=$(curl --silent https://raw.githubusercontent.com/technekes/nib/latest/VERSION)
  NIB_VERSION=$(version)

  if [ "$NIB_VERSION" != "$LATEST" ]; then
    echo ""
    echo "An update avaiable is available for nib: $LATEST"
    echo "Use 'nib update' to pull the latest version"
  fi
}

print_commands() {
  extended_commands_json="$(
    echo $(commands_json) | \
      jq 'map(. + {
        extra_help: (
          if (.long_description) == ""
          then ""
          else ". See ''nib \(.name) --help'' for more detail" end
        )
      })'
  )"

  template='"\(.name) \"\(.short_description)\(.extra_help)\" "'

  echo "Commands:"
  echo "$(echo $extended_commands_json:| jq -j ".[] | ${template}")" | \
    xargs printf "  %-19s %-s\n"
}

case $1 in
  -h|--help|help)
    if [ -n "$(type -t show_help)" ]; then
      show_help
    else
      show_common_help
    fi

    check_for_updates
    exit 0
    ;;
  --version|version)
    version

    check_for_updates
    exit 0
    ;;
esac
