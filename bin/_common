#!/bin/bash

# commonly used colors
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m' # No Color

COMMAND=`basename "$0"`

commands_json() {
  cat /usr/local/bin/config/commands.json
}

command_json() {
  echo $(commands_json) | jq -r ".[] | select(.name == \"$COMMAND\")"
}

compose_json() {
  cat docker-compose.yml | yaml2json
}

compose_version2() {
  grep -q "version.*2" docker-compose.yml
}

services() {
  prefix=""

  if compose_version2 ; then
    prefix=".services | "
  fi

  echo $(compose_json | jq "${prefix}keys")
}

fancy_echo() {
  echo -e "\n${BLUE}${1:-}${NC}"
}

contains_element() {
  local e
  for e in "${@:2}"; do [[ $(normalize $e) == "$1" ]] && return 0; done
  return 1
}

compose_image_name() {
  dir=${PWD##*/}
  echo ${dir//[_|-]}_$1
}

compose_container_name() {
  dir=${PWD##*/}
  echo ${dir//[_|-]}_$1_1
}

# Provided a organization e.g technekes/repo return repo
repo_name() {
  echo ${1#*/}
}

normalize() {
  echo "${1//-/}"
}

current_git_branch() {
  REPO_PATH=$1

  echo $(cd $REPO_PATH; git rev-parse --symbolic-full-name --abbrev-ref HEAD)
}

verbose_git_status() {
  REPO_PATH=$1

  echo $(cd $REPO_PATH; git fetch --quiet; git status | grep "Your branch")
}

detect_version() {
  CONTENT=$1

  echo "$CONTENT" | grep -o "[0-9]\.[0-9]\+\.[0-9]\+"
}

version_from_file_header() {
  FILE_PATH=$1

  echo $(detect_version "$(head -1 $FILE_PATH)")
}

version_of_package() {
  FILE_PATH=$1
  PACKAGE_NAME=$2

  package_definition=$(
    cat $FILE_PATH | grep \
      -e \'$PACKAGE_NAME\' \
      -e \"$PACKAGE_NAME\" \
      -e $PACKAGE_NAME:
  )

  if [ -z "$package_definition" ]; then
    echo $(version_from_file_header "$FILE_PATH")
  else
    echo $(detect_version "$package_definition")
  fi
}
