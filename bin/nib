#!/usr/bin/env ruby

require 'gli'
require 'nib'

include GLI::App

program_desc 'A docker-compose wrapper geared towards Ruby/Rails development'

version Nib::VERSION

subcommand_option_handling :normal
arguments :strict

pre do |global, command, options, args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global, command, options, args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

desc 'Run bundle for the given service'
arg :service
arg :command, %i(optional multiple)
command :bundle do |c|
  c.action do |global, options, args|
    Nib::WrapCommand.execute(options, args.insert(1, :bundle))
  end
end

desc 'Run bundle for the given service'
arg :service
arg :command, %i(optional multiple)
command :codeclimate do |c|
  c.action do |global, options, args|
    Nib::CodeClimate.execute(options, args)
  end
end

# TODO: console
# TODO: debug

desc 'Attach an interactive shell session to a running container'
arg :service
arg :command, %i(optional multiple)
command :exec do |c|
  c.action do |global, options, args|
    Nib::Exec.execute(options, args)
  end
end

desc 'Run the guard command for the given service'
arg :service
arg :command, %i(optional multiple)
command :guard do |c|
  c.action do |global, options, args|
    Nib::WrapCommand.execute(options, args.insert(1, :guard))
  end
end

desc 'Run the rails command for the given service'
arg :service
arg :command, %i(optional multiple)
command :rails do |c|
  c.action do |global, options, args|
    Nib::WrapCommand.execute(options, args.insert(1, :rails))
  end
end

desc 'Run the rake command for the given service'
arg :service
arg :command, %i(optional multiple)
command :rake do |c|
  c.action do |global, options, args|
    Nib::WrapCommand.execute(options, args.insert(1, :rake))
  end
end

desc 'Runs the rspec command for the given service'
arg :service
arg :command, %i(optional multiple)
command :rspec do |c|
  c.action do |global, options, args|
    Nib::WrapCommand.execute(options, args.insert(1, :rspec))
  end
end

desc 'Runs the rubocop command for the given service'
arg :service
arg :command, %i(optional multiple)
command :rubocop do |c|
  c.action do |global, options, args|
    Nib::WrapCommand.execute(options, args.insert(1, :rubocop))
  end
end

desc 'Wraps normal \'docker-compose run\' to ensure that --rm is always passed'
arg :service
arg :command, %i(optional multiple)
command :run do |c|
  c.action do |global, options, args|
    Nib::Run.execute(options, args)
  end
end

desc 'Runs application specific setup for the given service'
long_desc 'By default the setup command will execute \'bundle install && rake db:create db:migrate\'.

This behavior can be overriden by providing an executable file in the project at $pwd/bin/setup.
Additionally the setup process can be augmented by providing either $pwd/bin/setup.before or
$pwd/bin/setup.after. This allows for extending the default behavior without having to redefine it.'
arg :service
command :setup do |c|
  c.action do |global, options, args|
    Nib::Setup.execute(options, args)
  end
end

# TODO: shell

desc 'Download the latest version of the nib tool'
command :update do |c|
  c.action do |global, options, args|
    Nib::Update.execute(options, args)
  end
end

exit run(ARGV)
